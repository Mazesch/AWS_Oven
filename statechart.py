"""Implementation of statechart statechart.
Generated by YAKINDU Statechart Tools code generator.
"""

import sys, os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../src')))
from yakindu.rx import Observable

class Statechart:
	"""Implementation of the state machine Statechart.
	"""

	class State:
		""" State Enum
		"""
		(
			main_region_off,
			main_region_ready,
			main_region_ready_ready_warming,
			main_region_ready_ready_cooling,
			main_region_warmup,
			main_region_cooldown,
			null_state
		) = range(7)
	
	
	class EvBuf:
		"""Implementation of internal scope.
		"""
		
		def __init__(self):
			self.set_target_temp = False
			self.set_target_temp_value = None
	
	class StatechartEvBuf:
		"""Implementation of internal scope.
		"""
		
		def __init__(self, iface):
			self.iface = iface
	
	def __init__(self):
		""" Declares all necessary variables including list of states, histories etc. 
		"""
		
		self.target_temp = None
		self.set_target_temp = None
		self.set_target_temp_value = None
		self.ready = None
		self.ready_observable = Observable()
		self.off = None
		self.off_observable = Observable()
		self.operation_callback = None
		
		self.__threshold = None
		
		# enumeration of all states:
		self.__State = Statechart.State
		self.__state_conf_vector_changed = None
		self.__state_vector = [None] * 1
		for __state_index in range(1):
			self.__state_vector[__state_index] = self.State.null_state
		
		# initializations:
		self.__threshold = 5
		self.target_temp = 0.0
		self.__current = self.StatechartEvBuf(
			self.EvBuf()
		)
		self.__is_executing = False
	
	def is_active(self):
		"""Checks if the state machine is active.
		"""
		return self.__state_vector[0] is not self.__State.null_state
	
	def is_final(self):
		"""Checks if the statemachine is final.
		Always returns 'false' since this state machine can never become final.
		"""
		return False
			
	def is_state_active(self, state):
		"""Checks if the state is currently active.
		"""
		s = state
		if s == self.__State.main_region_off:
			return self.__state_vector[0] == self.__State.main_region_off
		if s == self.__State.main_region_ready:
			return (self.__state_vector[0] >= self.__State.main_region_ready)\
				and (self.__state_vector[0] <= self.__State.main_region_ready_ready_cooling)
		if s == self.__State.main_region_ready_ready_warming:
			return self.__state_vector[0] == self.__State.main_region_ready_ready_warming
		if s == self.__State.main_region_ready_ready_cooling:
			return self.__state_vector[0] == self.__State.main_region_ready_ready_cooling
		if s == self.__State.main_region_warmup:
			return self.__state_vector[0] == self.__State.main_region_warmup
		if s == self.__State.main_region_cooldown:
			return self.__state_vector[0] == self.__State.main_region_cooldown
		return False
		
	
	def raise_set_target_temp(self, value):
		"""Raise method for event set_target_temp.
		"""
		self.set_target_temp = True
		self.set_target_temp_value = value
		
	def __entry_action_main_region_ready(self):
		"""Entry action for state 'Ready'..
		"""
		self.ready_observable.next()
		
	def __entry_action_main_region_ready_ready_warming(self):
		"""Entry action for state 'Warming'..
		"""
		self.operation_callback.heat_on()
		
	def __entry_action_main_region_ready_ready_cooling(self):
		"""Entry action for state 'Cooling'..
		"""
		self.operation_callback.heat_off()
		
	def __entry_action_main_region_warmup(self):
		"""Entry action for state 'Warmup'..
		"""
		self.operation_callback.heat_on()
		
	def __entry_action_main_region_cooldown(self):
		"""Entry action for state 'Cooldown'..
		"""
		self.operation_callback.heat_off()
		
	def __enter_sequence_main_region_off_default(self):
		"""'default' enter sequence for state Off.
		"""
		self.__state_vector[0] = self.State.main_region_off
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_ready_default(self):
		"""'default' enter sequence for state Ready.
		"""
		self.__entry_action_main_region_ready()
		self.__enter_sequence_main_region_ready_ready_default()
		
	def __enter_sequence_main_region_ready_ready_warming_default(self):
		"""'default' enter sequence for state Warming.
		"""
		self.__entry_action_main_region_ready_ready_warming()
		self.__state_vector[0] = self.State.main_region_ready_ready_warming
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_ready_ready_cooling_default(self):
		"""'default' enter sequence for state Cooling.
		"""
		self.__entry_action_main_region_ready_ready_cooling()
		self.__state_vector[0] = self.State.main_region_ready_ready_cooling
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_warmup_default(self):
		"""'default' enter sequence for state Warmup.
		"""
		self.__entry_action_main_region_warmup()
		self.__state_vector[0] = self.State.main_region_warmup
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_cooldown_default(self):
		"""'default' enter sequence for state Cooldown.
		"""
		self.__entry_action_main_region_cooldown()
		self.__state_vector[0] = self.State.main_region_cooldown
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_default(self):
		"""'default' enter sequence for region main region.
		"""
		self.__react_main_region__entry_default()
		
	def __enter_sequence_main_region_ready_ready_default(self):
		"""'default' enter sequence for region ready.
		"""
		self.__react_main_region_ready_ready__entry_default()
		
	def __exit_sequence_main_region_off(self):
		"""Default exit sequence for state Off.
		"""
		self.__state_vector[0] = self.State.null_state
		
	def __exit_sequence_main_region_ready(self):
		"""Default exit sequence for state Ready.
		"""
		self.__exit_sequence_main_region_ready_ready()
		
	def __exit_sequence_main_region_ready_ready_warming(self):
		"""Default exit sequence for state Warming.
		"""
		self.__state_vector[0] = self.State.null_state
		
	def __exit_sequence_main_region_ready_ready_cooling(self):
		"""Default exit sequence for state Cooling.
		"""
		self.__state_vector[0] = self.State.null_state
		
	def __exit_sequence_main_region_warmup(self):
		"""Default exit sequence for state Warmup.
		"""
		self.__state_vector[0] = self.State.null_state
		
	def __exit_sequence_main_region_cooldown(self):
		"""Default exit sequence for state Cooldown.
		"""
		self.__state_vector[0] = self.State.null_state
		
	def __exit_sequence_main_region(self):
		"""Default exit sequence for region main region.
		"""
		state = self.__state_vector[0]
		if state == self.State.main_region_off:
			self.__exit_sequence_main_region_off()
		elif state == self.State.main_region_ready_ready_warming:
			self.__exit_sequence_main_region_ready_ready_warming()
		elif state == self.State.main_region_ready_ready_cooling:
			self.__exit_sequence_main_region_ready_ready_cooling()
		elif state == self.State.main_region_warmup:
			self.__exit_sequence_main_region_warmup()
		elif state == self.State.main_region_cooldown:
			self.__exit_sequence_main_region_cooldown()
		
	def __exit_sequence_main_region_ready_ready(self):
		"""Default exit sequence for region ready.
		"""
		state = self.__state_vector[0]
		if state == self.State.main_region_ready_ready_warming:
			self.__exit_sequence_main_region_ready_ready_warming()
		elif state == self.State.main_region_ready_ready_cooling:
			self.__exit_sequence_main_region_ready_ready_cooling()
		
	def __react_main_region__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_off_default()
		
	def __react_main_region_ready_ready__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_ready_ready_cooling_default()
		
	def __react(self, transitioned_before):
		"""Implementation of __react function.
		"""
		if self.__current.iface.set_target_temp:
			self.target_temp = self.__current.iface.set_target_temp_value
		return transitioned_before
	
	
	def __main_region_off_react(self, transitioned_before):
		"""Implementation of __main_region_off_react function.
		"""
		transitioned_after = transitioned_before
		transitioned_after = self.__react(transitioned_before)
		if transitioned_after < 0:
			if (self.__current.iface.set_target_temp) and (self.target_temp > 0):
				self.__exit_sequence_main_region_off()
				self.__enter_sequence_main_region_warmup_default()
				transitioned_after = 0
		return transitioned_after
	
	
	def __main_region_ready_react(self, transitioned_before):
		"""Implementation of __main_region_ready_react function.
		"""
		transitioned_after = transitioned_before
		transitioned_after = self.__react(transitioned_before)
		if transitioned_after < 0:
			if (self.__current.iface.set_target_temp) and (self.operation_callback.get_temp() > self.target_temp):
				self.__exit_sequence_main_region_ready()
				self.__enter_sequence_main_region_cooldown_default()
				transitioned_after = 0
			elif (self.__current.iface.set_target_temp) and (self.operation_callback.get_temp() < self.target_temp):
				self.__exit_sequence_main_region_ready()
				self.__enter_sequence_main_region_warmup_default()
				transitioned_after = 0
		return transitioned_after
	
	
	def __main_region_ready_ready_warming_react(self, transitioned_before):
		"""Implementation of __main_region_ready_ready_warming_react function.
		"""
		transitioned_after = transitioned_before
		transitioned_after = self.__main_region_ready_react(transitioned_before)
		if transitioned_after < 0:
			if self.operation_callback.get_temp() > (self.target_temp + self.__threshold):
				self.__exit_sequence_main_region_ready_ready_warming()
				self.__enter_sequence_main_region_ready_ready_cooling_default()
				transitioned_after = 0
		return transitioned_after
	
	
	def __main_region_ready_ready_cooling_react(self, transitioned_before):
		"""Implementation of __main_region_ready_ready_cooling_react function.
		"""
		transitioned_after = transitioned_before
		transitioned_after = self.__main_region_ready_react(transitioned_before)
		if transitioned_after < 0:
			if self.operation_callback.get_temp() < (self.target_temp - self.__threshold):
				self.__exit_sequence_main_region_ready_ready_cooling()
				self.__enter_sequence_main_region_ready_ready_warming_default()
				transitioned_after = 0
		return transitioned_after
	
	
	def __main_region_warmup_react(self, transitioned_before):
		"""Implementation of __main_region_warmup_react function.
		"""
		transitioned_after = transitioned_before
		transitioned_after = self.__react(transitioned_before)
		if transitioned_after < 0:
			if self.operation_callback.get_temp() > self.target_temp:
				self.__exit_sequence_main_region_warmup()
				self.__enter_sequence_main_region_ready_default()
				transitioned_after = 0
			elif (self.__current.iface.set_target_temp) and (self.operation_callback.get_temp() > self.target_temp):
				self.__exit_sequence_main_region_warmup()
				self.__enter_sequence_main_region_cooldown_default()
				transitioned_after = 0
		return transitioned_after
	
	
	def __main_region_cooldown_react(self, transitioned_before):
		"""Implementation of __main_region_cooldown_react function.
		"""
		transitioned_after = transitioned_before
		transitioned_after = self.__react(transitioned_before)
		if transitioned_after < 0:
			if self.operation_callback.get_temp() <= self.target_temp and self.target_temp <= 0:
				self.__exit_sequence_main_region_cooldown()
				self.off_observable.next()
				self.__enter_sequence_main_region_off_default()
				transitioned_after = 0
			elif self.operation_callback.get_temp() < self.target_temp:
				self.__exit_sequence_main_region_cooldown()
				self.__enter_sequence_main_region_ready_default()
				transitioned_after = 0
			elif (self.__current.iface.set_target_temp) and (self.operation_callback.get_temp() < self.target_temp):
				self.__exit_sequence_main_region_cooldown()
				self.__enter_sequence_main_region_warmup_default()
				transitioned_after = 0
		return transitioned_after
	
	
	def __swap_in_events(self):
		"""Implementation of __swap_in_events function.
		"""
		self.__current.iface.set_target_temp = self.set_target_temp
		self.__current.iface.set_target_temp_value = self.set_target_temp_value
		self.set_target_temp = False
	
	
	def __clear_in_events(self):
		"""Implementation of __clear_in_events function.
		"""
		self.set_target_temp = False
	
	
	def __micro_step(self):
		"""Implementation of __micro_step function.
		"""
		state = self.__state_vector[0]
		if state == self.State.main_region_off:
			self.__main_region_off_react(-1)
		elif state == self.State.main_region_ready_ready_warming:
			self.__main_region_ready_ready_warming_react(-1)
		elif state == self.State.main_region_ready_ready_cooling:
			self.__main_region_ready_ready_cooling_react(-1)
		elif state == self.State.main_region_warmup:
			self.__main_region_warmup_react(-1)
		elif state == self.State.main_region_cooldown:
			self.__main_region_cooldown_react(-1)
	
	
	def run_cycle(self):
		"""Implementation of run_cycle function.
		"""
		if self.operation_callback is None:
			raise ValueError("Operation callback must be set.")
		
		if self.__is_executing:
			return
		self.__is_executing = True
		self.__swap_in_events()
		self.__micro_step()
		self.__is_executing = False
	
	
	def enter(self):
		"""Implementation of enter function.
		"""
		if self.operation_callback is None:
			raise ValueError("Operation callback must be set.")
		
		if self.__is_executing:
			return
		self.__is_executing = True
		self.__enter_sequence_main_region_default()
		self.__is_executing = False
	
	
	def exit(self):
		"""Implementation of exit function.
		"""
		if self.__is_executing:
			return
		self.__is_executing = True
		self.__exit_sequence_main_region()
		self.__is_executing = False
	
	
	
